(defvar volume_open false)
(defvar mic_volume_open false)

; Check if system has a battery (for laptops vs desktops)
(defpoll has_battery :interval "10m" :initial false
  "bash -c '[ -n \"$(ls /sys/class/power_supply/BAT* 2>/dev/null)\" ] && echo true || echo false'")

(defwindow bar
  :monitor 0
  :exclusive true
  :geometry (geometry
              :x "0%"
              :y "0%"
              :width "100%"
              :height "10px"
              :anchor "top center")
  (bar))

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (box :class "container" time)
    (sidestuff)))

(deflisten SPACES
  :initial '{"active":0,"workspaces":[]}'
  "scripts/eww-ws")

(defwidget workspaces []
  (box :halign "start" :class "workspaces container"
    (for entry in "${SPACES.workspaces}"
      (button :onclick "hyprctl dispatch workspace ${entry.id}"
              :class {"${entry.is_active}" ? "active" : ""}
              {"${entry.is_active}" ? "" : "${entry.id}"}))))

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwidget bat []
  (box :class "icon-module bat-module"
       :vexpand "false"
       :hexpand "false"
    (circular-progress :value {EWW_BATTERY["BAT0"]?.capacity ?: 0}
       :class "batbar"
       :thickness 3
      (button :class "iconbat"
              :limit-width 2
              :tooltip "battery on ${EWW_BATTERY["BAT0"]?.capacity ?: 0}%"
              :show_truncated false
              :wrap false
              ; Only show battery widget if system has a battery
              {has_battery ? "" : ""}
          ))))

(defwidget sidestuff []
  (box :class "container"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (volume)
    (mic)
    (bat)
    (mem)
    (systray :class "tray"
             :icon-size 16
             :pack-direction "rtl")))

(defpoll volume_percent :initial 0.0 :interval "500ms"
  "eww-get-volume")

(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update volume_open=true"
            :onhoverlost "${EWW_CMD} update volume_open=false"
    (box :class "volume" :space-evenly false
      (button :onclick "pavucontrol &" "󰕾")
      (revealer :transition "slideleft"
                :reveal volume_open
                :duration "350ms"
        (scale :class "volbar"
               :value volume_percent
               :orientation "h"
               :tooltip "${volume_percent}%"
               :min 0
               :max 101
               :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")))))

(defpoll mic_volume_percent :initial 0.0 :interval "500ms"
  "eww-get-mic-volume")

(defpoll mic_in_use :initial 0 :interval "500ms"
  "eww-mic-use-status")

(defpoll mic_muted :initial false :interval "500ms"
  "eww-mic-mute-status")

(defwidget mic []
  (eventbox :visible {mic_in_use > 0}
            :onhover "${EWW_CMD} update mic_volume_open=true"
            :onhoverlost "${EWW_CMD} update mic_volume_open=false"
    (box :class "volume" :space-evenly false
      (button :onclick "mic-mute-toggle"
              {mic_muted ? "" : ""})
      (revealer :transition "slideleft"
                :reveal mic_volume_open
                :duration "250ms"
        (scale :class "volbar"
               :value mic_volume_percent
               :orientation "h"
               :tooltip "${mic_volume_percent}%"
               :min 0
               :max 151
               :onchange "pactl set-source-volume @DEFAULT_SOURCE@ {}%")))))

(defwidget mem []
  (box :class "icon-module mem-module"
       :vexpand "false"
       :hexpand "false"
    (circular-progress :value {round((EWW_RAM.used_mem / EWW_RAM.total_mem) * 100, 0)}
       :class "membar"
       :thickness 3
      (button :class "iconmem"
              :limit-width 2
              :tooltip "using ${round((EWW_RAM.used_mem / EWW_RAM.total_mem) * 100, 0)}% ram"
              :show_truncated false
              :wrap false
          ""))))

(defpoll calendar_day :interval "1h"
  "date '+%d'")
(defpoll calendar_year :interval "20h"
  "date '+%Y'")

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal"
                :day calendar_day
                :year calendar_year))))

(defwindow calendar
  :geometry (geometry
              :x "-20px"
              :y "7%"
              :anchor "top right"
              :width "270px"
              :height "60px")
  (cal))
